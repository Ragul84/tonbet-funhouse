
;; TON Casino Smart Contract
;; SPDX-License-Identifier: MIT

#pragma version >=0.4.0;

#include "imports/stdlib.fc";
#include "imports/utils.fc";

;; Storage variables
global slice owner_address;
global int min_bet;
global int max_bet;
global int house_edge_bps;
global int house_balance;
global cell bets_dict;
global cell user_bets_dict;
global slice randomness_source;

;; Constants
const int op::place_bet = 1;
const int op::resolve_bet = 2;
const int op::claim_winnings = 3;
const int op::withdraw_profits = 5;
const int op::add_house_funds = 6;
const int op::request_random = 1;  ;; Same as in randomness contract

;; Game types
const int game::coinflip = 1;
const int game::dice = 2;
const int game::crash = 3;

;; Bet status
const int status::pending = 0;
const int status::won = 1;
const int status::lost = 2;
const int status::refunded = 3;

;; Load contract storage
() load_data() impure {
  var ds = get_data().begin_parse();
  owner_address = ds~load_msg_addr();
  min_bet = ds~load_coins();
  max_bet = ds~load_coins();
  house_edge_bps = ds~load_uint(16);
  house_balance = ds~load_coins();
  bets_dict = ds~load_dict();
  user_bets_dict = ds~load_dict();
  randomness_source = ds~load_msg_addr();
  ds.end_parse();
}

;; Save contract storage
() save_data() impure {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_coins(min_bet)
    .store_coins(max_bet)
    .store_uint(house_edge_bps, 16)
    .store_coins(house_balance)
    .store_dict(bets_dict)
    .store_dict(user_bets_dict)
    .store_slice(randomness_source)
    .end_cell());
}

;; Only owner modifier check
() only_owner() impure {
  throw_unless(401, equal_slices(sender_address(), owner_address));
}

;; Only randomness source modifier check
() only_randomness_source() impure {
  throw_unless(402, equal_slices(sender_address(), randomness_source));
}

;; Generate a unique bet ID
slice generate_bet_id(slice player_address, int timestamp) {
  return begin_cell()
    .store_slice(player_address)
    .store_uint(timestamp, 64)
    .store_uint(rand(1000000), 32)
    .end_cell()
    .begin_parse();
}

;; Store a new bet
() store_bet(slice bet_id, slice player_address, int game_type, int prediction, int amount, int timestamp) impure {
  ;; Create bet data
  cell bet_data = begin_cell()
    .store_slice(player_address)
    .store_uint(game_type, 8)
    .store_coins(amount)
    .store_uint(prediction, 32)
    .store_uint(timestamp, 64)
    .store_uint(status::pending, 8)
    .store_uint(0, 32)  ;; outcome (to be filled later)
    .store_coins(0)     ;; payout (to be filled later)
    .end_cell();
  
  ;; Store in global bets dictionary
  bets_dict = dict_set(bets_dict, 256, bet_id, bet_data);
  
  ;; Add to user's bet list
  cell user_bets = dict_get_ref_or_empty(user_bets_dict, 256, player_address);
  user_bets = dict_set(user_bets, 64, timestamp, begin_cell().store_slice(bet_id).end_cell());
  user_bets_dict = dict_set_ref(user_bets_dict, 256, player_address, user_bets);
}

;; Calculate potential payout
int calculate_payout(int amount, int game_type, int prediction) impure {
  int multiplier = 0;
  
  if (game_type == game::coinflip) {
    ;; 50% chance game
    multiplier = 196;  ;; 1.96x in basis points
  } elseif (game_type == game::dice) {
    ;; 50% chance game
    multiplier = 196;  ;; 1.96x in basis points
  } elseif (game_type == game::crash) {
    ;; Multiplier is directly from prediction
    multiplier = prediction;
  }
  
  ;; Apply house edge
  int house_factor = 10000 - house_edge_bps;
  return (amount * multiplier * house_factor) / 1000000;
}

;; Process a bet placement
() process_bet(slice sender_address, int msg_value, int game_type, int prediction) impure {
  ;; Validate bet amount
  throw_unless(403, msg_value >= min_bet);
  throw_unless(404, msg_value <= max_bet);
  
  ;; Generate bet ID
  int timestamp = now();
  slice bet_id = generate_bet_id(sender_address, timestamp);
  
  ;; Store the bet
  store_bet(bet_id, sender_address, game_type, prediction, msg_value, timestamp);
  
  ;; Send event about new bet
  emit_log(begin_cell()
    .store_uint(op::place_bet, 32)
    .store_slice(bet_id)
    .store_slice(sender_address)
    .store_uint(game_type, 8)
    .store_uint(prediction, 32)
    .store_coins(msg_value)
    .end_cell());
    
  ;; Request randomness for this bet
  request_randomness(bet_id);
}

;; Send a request to the randomness provider
() request_randomness(slice bet_id) impure {
  ;; Create message to send to randomness provider
  cell msg = begin_cell()
    .store_uint(0x10, 6) ;; non-bouncing message
    .store_slice(randomness_source)
    .store_coins(100000000) ;; 0.1 TON for gas
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; default message header
    .store_uint(op::request_random, 32) ;; operation
    .store_slice(bet_id) ;; bet ID
    .end_cell();
    
  ;; Send the message
  send_raw_message(msg, 1); ;; pay transfer fees separately
}

;; Process bet resolution with provided randomness
() resolve_bet(slice bet_id, int random_value) impure {
  only_randomness_source();
  
  ;; Fetch bet data
  (cell bet_cell, int success) = dict_get?(bets_dict, 256, bet_id);
  throw_unless(405, success);
  
  slice bet_data = bet_cell.begin_parse();
  slice player_address = bet_data~load_msg_addr();
  int game_type = bet_data~load_uint(8);
  int bet_amount = bet_data~load_coins();
  int prediction = bet_data~load_uint(32);
  int timestamp = bet_data~load_uint(64);
  int status = bet_data~load_uint(8);
  
  ;; Check that bet is pending
  throw_unless(406, status == status::pending);
  
  ;; Determine outcome based on game type and random value
  int outcome = 0;
  int won = false;
  
  if (game_type == game::coinflip) {
    ;; Heads (1) or Tails (2)
    outcome = 1 + (random_value % 2);
    won = (outcome == prediction);
  } elseif (game_type == game::dice) {
    ;; Number 1-6
    outcome = 1 + (random_value % 6);
    if (prediction == 1) {
      ;; High prediction: win if outcome > 3
      won = (outcome > 3);
    } else {
      ;; Low prediction: win if outcome <= 3
      won = (outcome <= 3);
    }
  } elseif (game_type == game::crash) {
    ;; Generate crash point using a skewed distribution
    int rnd = random_value % 100;
    int crash_point;
    
    if (rnd < 15) {
      crash_point = 100 + (random_value % 20);
    } elseif (rnd < 65) {
      crash_point = 120 + (random_value % 180);
    } elseif (rnd < 90) {
      crash_point = 300 + (random_value % 500);
    } elseif (rnd < 98) {
      crash_point = 800 + (random_value % 1200);
    } else {
      crash_point = 2000 + (random_value % 3000);
    }
    
    outcome = crash_point;
    won = (crash_point >= prediction);
  }
  
  ;; Calculate payout if won
  int payout = 0;
  int new_status = status::lost;
  
  if (won) {
    payout = calculate_payout(bet_amount, game_type, prediction);
    new_status = status::won;
  }
  
  ;; Update bet data
  bet_cell = begin_cell()
    .store_slice(player_address)
    .store_uint(game_type, 8)
    .store_coins(bet_amount)
    .store_uint(prediction, 32)
    .store_uint(timestamp, 64)
    .store_uint(new_status, 8)
    .store_uint(outcome, 32)
    .store_coins(payout)
    .end_cell();
    
  bets_dict = dict_set(bets_dict, 256, bet_id, bet_cell);
  
  ;; Send payout if won
  if (won) {
    house_balance -= payout;
    send_raw_message(begin_cell()
      .store_uint(0x10, 6)
      .store_slice(player_address)
      .store_coins(payout)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(0, 32)
      .end_cell(), 1);
  }
  
  ;; Emit resolution event
  emit_log(begin_cell()
    .store_uint(op::resolve_bet, 32)
    .store_slice(bet_id)
    .store_uint(new_status, 8)
    .store_uint(outcome, 32)
    .store_coins(payout)
    .end_cell());
}

;; Main entry point
() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
  ;; Load contract data
  load_data();
  
  ;; Extract sender address
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  slice sender_address = cs~load_msg_addr();
  
  ;; Handle empty message (simple TON transfer)
  if (in_msg_body.slice_empty?()) {
    return save_data();
  }
  
  ;; Process message by op code
  int op = in_msg_body~load_uint(32);
  
  if (op == op::place_bet) {
    int game_type = in_msg_body~load_uint(8);
    int prediction = in_msg_body~load_uint(32);
    process_bet(sender_address, msg_value, game_type, prediction);
  }
  
  elseif (op == op::resolve_bet) {
    slice bet_id = in_msg_body~load_msg_addr();
    int random_value = in_msg_body~load_uint(256);
    resolve_bet(bet_id, random_value);
  }
  
  elseif (op == op::claim_winnings) {
    slice bet_id = in_msg_body~load_msg_addr();
    ;; Implement claim winnings logic if automatic payout fails
  }
  
  elseif (op == op::withdraw_profits) {
    only_owner();
    int amount = in_msg_body~load_coins();
    throw_unless(407, amount <= house_balance);
    house_balance -= amount;
    send_raw_message(begin_cell()
      .store_uint(0x10, 6)
      .store_slice(owner_address)
      .store_coins(amount)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(0, 32)
      .end_cell(), 1);
  }
  
  elseif (op == op::add_house_funds) {
    only_owner();
    house_balance += msg_value;
  }
  
  save_data();
}

;; Get methods for external queries

;; Get bet details by ID
(slice, int, int, int, int, int, int, int) get_bet(slice bet_id) method_id {
  load_data();
  (cell bet_cell, int success) = dict_get?(bets_dict, 256, bet_id);
  
  if (~ success) {
    return (null(), 0, 0, 0, 0, 0, 0, 0);
  }
  
  slice bet_data = bet_cell.begin_parse();
  slice player_address = bet_data~load_msg_addr();
  int game_type = bet_data~load_uint(8);
  int bet_amount = bet_data~load_coins();
  int prediction = bet_data~load_uint(32);
  int timestamp = bet_data~load_uint(64);
  int status = bet_data~load_uint(8);
  int outcome = bet_data~load_uint(32);
  int payout = bet_data~load_coins();
  
  return (player_address, game_type, bet_amount, prediction, timestamp, status, outcome, payout);
}

;; Get contract parameters
(slice, int, int, int, int) get_contract_info() method_id {
  load_data();
  return (owner_address, min_bet, max_bet, house_edge_bps, house_balance);
}
