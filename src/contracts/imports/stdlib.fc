
;; Standard library for FunC
;; This is a simplified version for the TON Casino contract

forall X -> tuple tuple_cons(X head, tuple tail) asm "CONS";
forall X -> (X, tuple) tuple_pop(tuple t) asm "UNCONS";
forall X -> X tuple_index(tuple t, int index) asm "INDEXVAR";

slice begin_parse(cell c) asm "CTOS";
(slice, slice) load_msg_addr(slice s) asm "LDMSGADDR";
builder begin_cell() asm "NEWC";
cell end_cell(builder b) asm "ENDC";
builder store_slice(builder b, slice s) asm "STSLICE";
builder store_ref(builder b, cell c) asm "STREF";
builder store_uint(builder b, int x, int len) asm "STUX";
builder store_coins(builder b, int x) asm "STGRAMS";
(slice, int) load_uint(slice s, int len) asm( -> 1 0) "LDUX";
(slice, int) load_coins(slice s) asm( -> 1 0) "LDGRAMS";
(slice, cell) load_ref(slice s) asm( -> 1 0) "LDREF";
int equal_slices(slice a, slice b) asm "SDEQ";
int builder_bits(builder b) asm "BBITS";
int builder_depth(builder b) asm "BDEPTH";
int slice_bits(slice s) asm "SBITS";
int slice_refs(slice s) asm "SREFS";
int slice_bits_refs(slice s) asm "SBITREFS";
(int, int) slice_bits_refs_same?(slice s) asm "SBITREFS";
int slice_hash(slice s) asm "HASHSU";
int cell_hash(cell c) asm "HASHCU";
int cell_depth(cell c) asm "CDEPTH";
int builder_refs(builder b) asm "BREFS";
int null?(tuple t) asm "ISNULL";
tuple empty_tuple() asm "NIL";
tuple single_tuple(any x) asm "SINGLE";
int tuple_length(tuple t) asm "TLEN";
int min(int x, int y) asm "MIN";
int max(int x, int y) asm "MAX";
int now() asm "NOW";
int rand(int range) asm "RAND";
int get_data() asm "c4 PUSH";
() set_data(cell c) impure asm "c4 POP";
cell get_c5() asm "c5 PUSH";
() set_c5(cell c) impure asm "c5 POP";
() accept_message() impure asm "ACCEPT";
() set_gas_limit(int limit) impure asm "SETGASLIMIT";
() commit() impure asm "COMMIT";
() throw(int error_code) impure asm "THROWANY";
() throw_if(int cond, int error_code) impure asm "THROWARGIF";
() throw_unless(int cond, int error_code) impure asm "THROWARGIFNOT";
() emit_log(cell c) impure asm "c7 PUSH 0 SWAP 1 3 DICTSET 0 1 c7 POPCTR";
() send_raw_message(cell msg, int mode) impure asm "SENDRAWMSG";

;; Dictionary functions for storing bets and user data
(cell, ()) dict_set(cell dict, int key_len, slice index, cell value) asm(value dict index key_len) "DICTSETREF";
(cell, (cell, int)) dict_get?(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGETREF";
(cell, ()) dict_set_ref(cell dict, int key_len, slice index, cell value) asm(value dict index key_len) "DICTSETREF";
cell dict_get_ref_or_empty(cell dict, int key_len, slice index) {
    (cell d, int success) = dict_get?(dict, key_len, index);
    if (success) {
        return d;
    } else {
        return begin_cell().end_cell();
    }
}
